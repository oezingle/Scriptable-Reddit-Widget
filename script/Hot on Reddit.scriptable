{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "orange",
    "glyph" : "fire"
  },
  "name" : "Hot on Reddit",
  "script" : "\/\/subreddit photos by Oezingle\n\/\/Version 1.5.1\n\n\/* Acceptable Subreddit value examples\n\"nocontextpics\"\n\"r\/itookapicture\"\n\"u\/egnogra\"\n*\/\n\nvar conf = {  \n  Subreddits: [\n    \"r\/pics\"\n  ],\n  \n  Banned: [\n  ],\n  \n  SHOW_TITLE: true,  \n  SHOW_SUBREDDIT: true,\n  \n  SHOW_POINTS: true,  \n  SHOW_USERNAME: true,\n  \n  REFRESH_IN_MINUTES: 5,  \n  BLOCK_NSFW: true\n}\n\/*\nChangelog\n1.5.1\nImproved code and error messages\nfixed, 1.5.0 didn't work\n1.5.0\nAdded a documentation website, and moved to github. watch this space\n\n1.4.0\nreplaced the upvote suffixes with lowercase versions\nlinks are now checked for image extensions\nBLOCK_NSFW added. self explanitory\n\n1.3.1\nREFRESH_IN_MINUTES sets how many minutes it will be until the widget reloads\nPosts made by admins that have been stickied are automatically removed. These are often subreddit guides, and are uninsteresting\n\n1.3.0\nSHOW_SUBREDDIT now shows the sub instead of user, if a user is the chosen subreddit\nthe Banned variable can be set to users or subs you don't want to see posts from\n\n1.2.0\nSwitched to old.reddit.com (faster)\nAdded text shadows for better visibility\nerror message shown when no photos found\nwidget parameters:  \n  - : replace Subreddit list (must be the first parameter)\n  , : next Subreddit\n  eg: \"-, memes\" will show only content from r\/memes\n  \n1.1.1\nusers' feeds can be added!\nfixed multi-image posting\nmore correct post selection\n*\/\n\n\/\/TODO: Broken cross-posted videos (??)\n\/\/TODO: higher likelyhood of top post being used\n\/\/(random(100))^(1\/2)\n\n\/\/load the config file\nif (!file_exists(\"hot_on_reddit.json\")) {  \n  console.warn(\"new\")\n  save_json(JSON.stringify(conf))\n} else {\n  console.log(\"load\")\n  conf = load_json()\n}\n\nvar version = \"1.5.1\"\n\n\/\/for config\nvar configDone = false;\nvar subMenuDone = false;\n\nvar shouldRunInWidget = false;\n\nif (!config.runsInWidget) {\nvar alert = new Alert()\n  \n  alert.addAction(\"Preview the widget\")  \n  alert.addAction(\"Documentation\")  \n  alert.addAction(\"Configuration\")\n  alert.addCancelAction(\"Cancel\")\n  \n  var choice = await alert.presentSheet()\n  \n  var subMenuActions = [  \n  {\n    type: \"text\",\n    title: \"add subreddit\",\n    code: \"Subreddits.push(inputText)\",\n  },\n  {\n    type: \"simple\",\n    title: \"add to list\",\n    code: \"\",\n  }\n]\n\nvar inputActions = [  \n  {\n    type: \"simple\",\n    title: \"Add\/remove subreddits\",\n    code: 'submenuDone = false;\\nwhile (!submenuDone) {\\nawait subMenu()\\n}'\n  },\n  {\n    type: \"boolean\",\n    variable: \"conf.BLOCK_NSFW\",\n    title: \"Block NSFW content\",\n  },\n  {\n    type: \"boolean\",\n    variable: \"conf.SHOW_TITLE\",\n    title: \"Show post title\",\n  },\n  {\n    type: \"boolean\",\n    variable: \"conf.SHOW_SUBREDDIT\",\n    title: \"Show subreddit\",\n  },\n  {\n    type: \"boolean\",\n    variable: \"conf.SHOW_POINTS\",\n    title: \"Show upvotes\",\n  },\n  {\n    type: \"boolean\",\n    variable: \"conf.SHOW_USERNAME\",\n    title: \"Show author\",\n  },\n  {\n    type: \"cancel\",\n    title: \"Done\",\n    code: \"save_conf();\\nconfigDone = true\",\n  },\n]\n\nif (choice == 2) {\nwhile (!configDone) {\n  await createConfigAlert(inputActions)\n}\n}\n  \/\/preview \nif (choice == 0) {\n  shouldRunInWidget = true\n  \/\/widget.presentLarge()\n}\n\/\/documentation\nif (choice == 1) {\n  var docsite = await new Request(\"https:\/\/raw.githubusercontent.com\/oezingle\/Scriptable-Reddit-Widget\/main\/docs\/web.html\").loadString()\n  docsite = docsite.replace(\"SCRIPT_VERSION\", version)\n\n  WebView.loadHTML(docsite, null)\n}\n\/\/cancel\nif (choice == -1) {\n  \/\/doesn't exist!\n  \/\/exit()\n}\n} else { \n  shouldRunInWidget = true;\n}\n\nif (shouldRunInWidget) {\nvar data;\n\n  try {\n    \/\/get subreddits from the ones specified in the parameter\n    var parameters = args.widgetParameter\n    if (parameters != null) {\n      \/\/TODO this is a very unelegant solution. Improve me! \n      parameters = parameters.replace(\" \", \",\").replace(\",,\", \",\").replace(\",,\", \",\").split(\",\");\n\n      \/\/ check for a \"-\" or one single letter parameter\n      if (!(parameters.length == 1 && parameters[0].length == 1)) {\n        \/\/this is parameters actually being used  \n        if (parameters[0] == \"-\") {\n          parameters.splice(0, 1)\n          conf.Subreddits = parameters\n        } else {\n          conf.Subreddits = Subreddits.concat(parameters)\n        }\n      }\n    }\n  } catch {\n    error_widget(\"your widget parameters couldn't be evaluated!\")\n  }\n\n  try {\n    var sub = conf.Subreddits[Math.floor(Math.random() * conf.Subreddits.length)]\n\n  } catch {\n    error_widget(\"A subreddit couln't be chosen!\")\n  }\n  \/\/only use the \/ so we don't get false positives out of \"u\/<user>\"\n  if (!sub.includes(\"\/\")) { sub = \"r\/\" + sub }\n\n  var url = \"https:\/\/old.reddit.com\/\" + sub\n  \/\/mm single line code\n  url = (sub.includes(\"u\/\")) ? url + \"\/submitted\/.json?count=100\" : url + \"\/hot\/.json?count=10\"\n\n  json = await new Request(url).loadJSON()  \n  json = json.data.children\n\n  \/\/remove the things with bad tags, by moving down the array index by index and checking\n  for (var i = json.length - 1; i >= 0; i--) {\n    data = json[i].data\n\n    if (\n      data.is_self || \/\/text post\n      data.media != null || \/\/video post\n      data.url.includes(\"gallery\") || \/\/multi-image\n      conf.Banned.includes(data.subreddit) || \/\/banned subreddit\n      conf.Banned.includes(\"u\/\" + data.author) || \/\/banned user\n      (data.distinguished != false && data.stickied) || \/\/mod post (boring!)\n      !is_image(data.url) || \/\/definitely an image\n      (data.over_18 && conf.BLOCK_NSFW) \/\/nsfw content\n    ) {\n      console.warn(data.title)\n      json.splice(i, 1)\n    } else {\n      console.log(data.title)\n    }\n  }\n\n  var image\n  try {\n    data = json[Math.floor(Math.random() * json.length)\n    ].data\n\n    console.log(\"\")\n    console.log(data.title)\n  } catch {\n    error_widget(\"an image can't be found!\")\n  }\n  \/\/ data.title  \n  \/\/ data.score  \n  \/\/ data.author  \n  \/\/ data.url  \n  \/\/     \n  \/\/console.log(data)\n\n  try {\n\n    image = await new Request(data.url).loadImage()\n  } catch {\n    error_widget(\"the image found isn't loading\")\n  }\n\n  widget = new ListWidget()\n  widget.backgroundImage = image\n\n  \/\/TODO: open in the app automagically\n  \/\/ reddit.app.link ?\n  widget.url = \"https:\/\/www.reddit.com\" + data.permalink\n\n  \/*\"https:\/\/www.reddit.com\/r\/teenagers\/comments\/ktwrzu\/hello_im_back_ive_been_unbanned\/?utm_source=share&utm_medium=ios_app&utm_name=iossmf\"*\/\n\n  \/\/ add title &\/or uploader, points, subreddit\n  const top = widget.addStack()\n  top.layoutHorizontally()\n  top.centerAlignContent()\n  top.spacing = 3\n\n  if (conf.SHOW_TITLE) { addText(top, data.title) }\n  top.addSpacer()\n  if (conf.SHOW_SUBREDDIT) { addText(top, data.subreddit_name_prefixed) }\n\n  widget.addSpacer()\n\n  const bottom = widget.addStack()\n  bottom.layoutHorizontally()\n  bottom.centerAlignContent()\n  bottom.spacing = 3\n\n  if (conf.SHOW_POINTS) {\n    addSymbol(bottom, \"arrow.up.square.fill\")\n    addText(bottom,\n      String(abbreviateNumber(data.score, 0))\n    )\n    addSymbol(bottom, \"arrow.down.square.fill\")\n  }\n  bottom.addSpacer()\n  \n  if (conf.SHOW_USERNAME) { addText(bottom, `u\/${data.author}`) }\n\n  \/\/refresh every 5 mins\n  var refreshDate = Date.now() + 60 * 1000 * conf.REFRESH_IN_MINUTES\n  widget.refreshAfterDate = new Date(refreshDate)\n\nScript.setWidget(widget)\n  \n  if (!config.runsInWidget) {\n    widget.presentLarge();\n  }\n} \n\nScript.complete()\n\n\/* =========================================== FUNCTION ZONE ========================= *\/\n\n\/\/error message\nfunction error_widget(message) {\n  console.log(data)\n\n  var dc = new DrawContext()\n  dc.drawText(\"Something has gone wrong\", new Point(10, 70))\n  dc.drawText(message, new Point(10, 130))\n\n  image = dc.getImage()\n  \n  \/\/exit();\n}\n\n\/\/boolean file type check\nfunction is_image(url) {\n  var file_types = [\n    \".gif\", \".png\", \".jpeg\", \".jpg\", \".tiff\", \".webp\", \".bmp\", \".raw\"]\n\n  for (var q in file_types) {\n    if (url.includes(file_types[q])) {\n      return true\n    }\n  }\n\n  return false\n}\n\n\n\/\/ functions stolen from the instagram post script.\n\nfunction addText(container, text) {\n  const txt = container.addText(text)\n  txt.font = Font.systemFont(12)\n  txt.textColor = Color.white()\n  txt.shadowRadius = 3\n  txt.shadowColor = Color.darkGray()\n}\nfunction addSymbol(container, name) {\n  const sfIcon = SFSymbol.named(name)\n  const fIcon = sfIcon.image\n  const icon = container.addImage(fIcon)\n  icon.tintColor = Color.white()\n  icon.imageSize = new Size(12, 12)\n  return icon\n}\n\n\n\/\/ found on : https:\/\/stackoverflow.com\/a\/32638472\n\/\/ thanks @D.Deriso\nfunction abbreviateNumber(num, fixed) {\n\n  if (num === null) { return null; } \/\/ terminate early\n  if (num === 0) { return '0'; } \/\/ terminate early\n  fixed = (!fixed || fixed < 0) ? 0 : fixed; \/\/ number of decimal places to show\n  var b = (num).toPrecision(2).split(\"e\"), \/\/ get power\n    k = b.length === 1 ? 0 : Math.floor(Math.min(b[1].slice(1), 14) \/ 3), \/\/ floor at decimals, ceiling at trillions\n    c = k < 1 ? num.toFixed(0 + fixed) : (num \/ Math.pow(10, k * 3)).toFixed(1 + fixed), \/\/ divide by power\n    d = c < 0 ? c : Math.abs(c), \/\/ enforce -0 is 0\n    e = d + ['', 'k', 'm', 'b', 't'][k]; \/\/ append power\n  return e;\n}\n\n\n\n\/\/=========================================\n\/\/config menu functions\n\/\/=========================================\n\nasync function asyncEvalWrapper(code) {\n  \/\/await Object.getPrototypeOf(async function() {}).constructor(code)();\n  \n  let ctxScript = 'var EVAL_ASYNC = async function() {'+ code +'}';\n  eval( ctxScript );\n  \/\/var EVAL_ASYNC = async function() {code}\n  await EVAL_ASYNC();\n}\n\nasync function createConfigAlert(actions) {\n  var TempAlert = new Alert()\n  var indexedCode = []\n  var indexedTextCode = []\n  \n  for (i in actions) {\n    var action = actions[i]\n    switch (action.type) {\n      case \"simple\":\n        \/\/code\n        TempAlert.addAction(action.title)\n        \n        indexedCode.push(action.code)\n        break;\n        \n      case \"boolean\":\n        \/\/code\n        TempAlert.addAction(action.title + \" \" + (eval(action.variable) ? \"◉\" : \"◎\"))\n        \n        indexedCode.push(action.variable + \" = !\" + action.variable)\n        break;\n      \n      case \"cancel\":\n        \/\/code\n        TempAlert.addCancelAction(\naction.title)  \n        \n        indexedCode[-1] = action.code\n        break;\n      \n      case \"text\":\n        \/\/code\n        TempAlert.addTextField(action.title)\n  \n        indexedTextCode.push(action.code)\n        break;\n    }\n  }\n  \n  var index = await TempAlert.present()\n  \n  for (i in indexedTextCode) {\n    var inputText = TempAlert.textFieldValue(i)\n    if (inputText != \"\") {\n      await asyncEvalWrapper(\n        indexedTextCode[i].replace(  \n          \"inputText\",\n          \"\\\"\" + inputText + \"\\\"\")\n      )\n      \n    }\n  }\n  \n  await asyncEvalWrapper(indexedCode[index])\n}\n\nasync function subMenu() {\n  var tempSubMenu = [  \n    {\n      type: \"text\",\n      title: \"add subreddit\",\n      code: \"conf.Subreddits.push(inputText)\",\n    },  \n  ];\n    \n  for (i in conf.Subreddits) {  \n    var tempAction = {  \n      type: \"simple\",  \n      title: \"Remove \" + conf.Subreddits[i],  \n      code: \"conf.Subreddits.splice(\" + i + \", 1)\",  \n    }  \n    tempSubMenu.push(tempAction)  \n  }\n  \n  var nothingAction = {\n    type: \"simple\",\n    title: \"Refresh\",\n    code: \"\",\n  }\n  tempSubMenu.push(nothingAction)\n    \n  var exitAction = {  \n    type: \"cancel\",\n    title: \"Back\",\n    code: \"submenuDone = true\"  \n  };  \n  tempSubMenu.push(exitAction)\n  \n  await createConfigAlert(tempSubMenu)\n}\n\n\/\/config saving + loading\n\nfunction save_conf() {\n  save_json(JSON.stringify(conf))\n}\n\nfunction save_json(json) {\n  \nvar path = FileManager.iCloud().documentsDirectory();\nvar fileName = \"hot_on_reddit.json\"\n\nFileManager.iCloud().writeString(path + \"\/\" + fileName, json)\n}\n\nfunction load_json() {\n  var path = FileManager.iCloud().documentsDirectory();\nvar fileName = \"hot_on_reddit.json\"\n\nvar file = FileManager.iCloud().readString(path + \"\/\" + fileName)\n\nreturn JSON.parse(file)\n}\n\nfunction file_exists(path) {\n  if (! path.includes(\"\/\")) {\n    \/\/make the path \"local\"\n    path = FileManager.iCloud().documentsDirectory() + \"\/\" + path\n  }\n  \n  return FileManager.iCloud().fileExists(path)  \n}",
  "share_sheet_inputs" : [

  ]
}